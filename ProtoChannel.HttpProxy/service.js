﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// ReSharper disable DuplicatingLocalDeclaration, UnusedParameter

DefaultValueTests = Class.create(ProtoMessage, {
    initialize: function ($super, values) {
        this.stringValue = 'Default value';
        this.intValue = 1;
        this.doubleValue = 1.0;

        $super(6, values);
    },

    serialize: function () {
        var message = {};

        if (this.stringValue !== 'Default value') {
            message[1] = this.stringValue;
        }
        if (this.intValue !== 1) {
            message[2] = this.intValue;
        }
        if (this.doubleValue !== 1.0) {
            message[3] = this.doubleValue;
        }

        return message;
    },

    deserialize: function (message) {
        if (message[1] !== undefined) {
            this.stringValueProvided = true;
            this.stringValue = message[1];
        }
        if (message[2] !== undefined) {
            this.intValueProvided = true;
            this.intValue = message[2];
        }
        if (message[3] !== undefined) {
            this.doubleValueProvided = true;
            this.doubleValue = message[3];
        }
    }
});

ProtoRegistry.registerType(DefaultValueTests, 6);

Gender = {
    Male: 1,
    Female: 2
};

IntArrayTest = Class.create(ProtoMessage, {
    initialize: function ($super, values) {
        this.values = [];

        $super(8, values);
    },

    serialize: function () {
        var message = {};

        if (this.values !== null && this.values.length > 0) {
            message[1] = this.values;
        }

        return message;
    },

    deserialize: function (message) {
        if (message[1] !== undefined) {
            this.valuesProvided = true;
            this.values = message[1];
        }
    }
});

ProtoRegistry.registerType(IntArrayTest, 8);

MessageWithCircularReference = Class.create(ProtoMessage, {
    initialize: function ($super, values) {
        this.message = null;

        $super(14, values);
    },

    serialize: function () {
        var message = {};

        if (this.message !== null) {
            var item = this.message;
            if (!(item instanceof MessageWithCircularReference)) {
                item = new MessageWithCircularReference(item);
            }
            message[1] = item.serialize();
        }

        return message;
    },

    deserialize: function (message) {
        if (message[1] !== undefined) {
            this.messageProvided = true;
            if (message[1] === null) {
                this.message = null;
            } else {
                var item = new MessageWithCircularReference();
                item.deserialize(message[1]);
                this.message = item;
            }
        }
    }
});

ProtoRegistry.registerType(MessageWithCircularReference, 14);

MessageWithEnum = Class.create(ProtoMessage, {
    initialize: function ($super, values) {
        this.gender = 0;

        $super(12, values);
    },

    serialize: function () {
        var message = {};

        if (this.gender !== 0) {
            message[1] = this.gender;
        }

        return message;
    },

    deserialize: function (message) {
        if (message[1] !== undefined) {
            this.genderProvided = true;
            this.gender = message[1];
        }
    }
});

ProtoRegistry.registerType(MessageWithEnum, 12);

MessageWithNestedTypes = Class.create(ProtoMessage, {
    initialize: function ($super, values) {
        this.nestedTypeMember = null;

        $super(13, values);
    },

    serialize: function () {
        var message = {};

        if (this.nestedTypeMember !== null) {
            var item = this.nestedTypeMember;
            if (!(item instanceof MessageWithNestedTypes.NestedType)) {
                item = new MessageWithNestedTypes.NestedType(item);
            }
            message[1] = item.serialize();
        }

        return message;
    },

    deserialize: function (message) {
        if (message[1] !== undefined) {
            this.nestedTypeMemberProvided = true;
            if (message[1] === null) {
                this.nestedTypeMember = null;
            } else {
                var item = new MessageWithNestedTypes.NestedType();
                item.deserialize(message[1]);
                this.nestedTypeMember = item;
            }
        }
    }
});

ProtoRegistry.registerType(MessageWithNestedTypes, 13);

MessageWithNestedTypes.NestedType = Class.create(ProtoType, {
    initialize: function ($super, values) {
        this.nestedSubTypeMember = null;

        $super(values);
    },

    serialize: function () {
        var message = {};

        if (this.nestedSubTypeMember !== null) {
            var item = this.nestedSubTypeMember;
            if (!(item instanceof MessageWithNestedTypes.NestedType.NestedSubType)) {
                item = new MessageWithNestedTypes.NestedType.NestedSubType(item);
            }
            message[1] = item.serialize();
        }

        return message;
    },

    deserialize: function (message) {
        if (message[1] !== undefined) {
            this.nestedSubTypeMemberProvided = true;
            if (message[1] === null) {
                this.nestedSubTypeMember = null;
            } else {
                var item = new MessageWithNestedTypes.NestedType.NestedSubType();
                item.deserialize(message[1]);
                this.nestedSubTypeMember = item;
            }
        }
    }
});

MessageWithNestedTypes.NestedType.NestedSubType = Class.create(ProtoType, {
    initialize: function ($super, values) {
        this.value = 0;

        $super(values);
    },

    serialize: function () {
        var message = {};

        if (this.value !== 0) {
            message[1] = this.value;
        }

        return message;
    },

    deserialize: function (message) {
        if (message[1] !== undefined) {
            this.valueProvided = true;
            this.value = message[1];
        }
    }
});

NestedType = Class.create(ProtoType, {
    initialize: function ($super, values) {
        this.value = null;

        $super(values);
    },

    serialize: function () {
        var message = {};

        if (this.value !== null) {
            message[1] = this.value;
        }

        return message;
    },

    deserialize: function (message) {
        if (message[1] !== undefined) {
            this.valueProvided = true;
            this.value = message[1];
        }
    }
});

NestedTypeArrayTest = Class.create(ProtoMessage, {
    initialize: function ($super, values) {
        this.values = [];

        $super(10, values);
    },

    serialize: function () {
        var message = {};

        if (this.values !== null && this.values.length > 0) {
            var items = [];
            for (var i = 0; i < this.values.length; i++) {
                var item = this.values[i];
                if (!(item instanceof NestedType)) {
                    item = new NestedType(item);
                }
                items.push(item.serialize());
            }
            message[1] = items;
        }

        return message;
    },

    deserialize: function (message) {
        if (message[1] !== undefined) {
            this.valuesProvided = true;
            this.values = [];
            for (var i = 0; i < message[1].length; i++) {
                var value = message[1][i];
                if (value === null) {
                    this.values.push(null);
                } else {
                    var item = new NestedType();
                    item.deserialize(value);
                    this.values.push(item);
                }
            }
        }
    }
});

ProtoRegistry.registerType(NestedTypeArrayTest, 10);

NestedTypeTest = Class.create(ProtoMessage, {
    initialize: function ($super, values) {
        this.value = null;

        $super(9, values);
    },

    serialize: function () {
        var message = {};

        if (this.value !== null) {
            var item = this.value;
            if (!(item instanceof NestedType)) {
                item = new NestedType(item);
            }
            message[1] = item.serialize();
        }

        return message;
    },

    deserialize: function (message) {
        if (message[1] !== undefined) {
            this.valueProvided = true;
            if (message[1] === null) {
                this.value = null;
            } else {
                var item = new NestedType();
                item.deserialize(message[1]);
                this.value = item;
            }
        }
    }
});

ProtoRegistry.registerType(NestedTypeTest, 9);

OneWayPing = Class.create(ProtoMessage, {
    initialize: function ($super, values) {
        this.payload = null;

        $super(5, values);
    },

    serialize: function () {
        var message = {};

        if (this.payload !== null) {
            message[1] = this.payload;
        }

        return message;
    },

    deserialize: function (message) {
        if (message[1] !== undefined) {
            this.payloadProvided = true;
            this.payload = message[1];
        }
    }
});

ProtoRegistry.registerType(OneWayPing, 5);

Ping = Class.create(ProtoMessage, {
    initialize: function ($super, values) {
        this.payload = null;

        $super(1, values);
    },

    serialize: function () {
        var message = {};

        if (this.payload !== null) {
            message[1] = this.payload;
        }

        return message;
    },

    deserialize: function (message) {
        if (message[1] !== undefined) {
            this.payloadProvided = true;
            this.payload = message[1];
        }
    }
});

ProtoRegistry.registerType(Ping, 1);

Pong = Class.create(ProtoMessage, {
    initialize: function ($super, values) {
        this.payload = null;

        $super(2, values);
    },

    serialize: function () {
        var message = {};

        if (this.payload !== null) {
            message[1] = this.payload;
        }

        return message;
    },

    deserialize: function (message) {
        if (message[1] !== undefined) {
            this.payloadProvided = true;
            this.payload = message[1];
        }
    }
});

ProtoRegistry.registerType(Pong, 2);

StreamRequest = Class.create(ProtoMessage, {
    initialize: function ($super, values) {
        this.length = -1;

        $super(3, values);
    },

    serialize: function () {
        var message = {};

        if (this.length !== -1) {
            message[1] = this.length;
        }

        return message;
    },

    deserialize: function (message) {
        if (message[1] !== undefined) {
            this.lengthProvided = true;
            this.length = message[1];
        }
    }
});

ProtoRegistry.registerType(StreamRequest, 3);

StreamResponse = Class.create(ProtoMessage, {
    initialize: function ($super, values) {
        this.streamId = 0;

        $super(4, values);
    },

    serialize: function () {
        var message = {};

        if (this.streamId !== 0) {
            message[1] = this.streamId;
        }

        return message;
    },

    deserialize: function (message) {
        if (message[1] !== undefined) {
            this.streamIdProvided = true;
            this.streamId = message[1];
        }
    }
});

ProtoRegistry.registerType(StreamResponse, 4);

StringArrayTest = Class.create(ProtoMessage, {
    initialize: function ($super, values) {
        this.values = [];

        $super(7, values);
    },

    serialize: function () {
        var message = {};

        if (this.values !== null && this.values.length > 0) {
            message[1] = this.values;
        }

        return message;
    },

    deserialize: function (message) {
        if (message[1] !== undefined) {
            this.valuesProvided = true;
            this.values = message[1];
        }
    }
});

ProtoRegistry.registerType(StringArrayTest, 7);

StringTest = Class.create(ProtoMessage, {
    initialize: function ($super, values) {
        this.value = null;

        $super(15, values);
    },

    serialize: function () {
        var message = {};

        if (this.value !== null) {
            message[1] = this.value;
        }

        return message;
    },

    deserialize: function (message) {
        if (message[1] !== undefined) {
            this.valueProvided = true;
            this.value = message[1];
        }
    }
});

ProtoRegistry.registerType(StringTest, 15);

ThrowingTest = Class.create(ProtoMessage, {
    initialize: function ($super, values) {
        $super(11, values);
    },

    serialize: function () {
        var message = {};

        return message;
    },

    deserialize: function (message) {
    }
});

ProtoRegistry.registerType(ThrowingTest, 11);

ServiceChannel = Class.create(ProtoChannel, {
    ping: function (message, callback) {
        if (!(message instanceof Ping))
            message = new Ping(message);

        this.sendMessage(message, callback);
    },

    oneWayPing: function (message) {
        if (!(message instanceof OneWayPing))
            message = new OneWayPing(message);

        this.postMessage(message);
    },

    streamUpload: function (message) {
        if (!(message instanceof StreamResponse))
            message = new StreamResponse(message);

        this.postMessage(message);
    },

    streamRequest: function (message, callback) {
        if (!(message instanceof StreamRequest))
            message = new StreamRequest(message);

        this.sendMessage(message, callback);
    },

    defaultValueTest: function (message, callback) {
        if (!(message instanceof DefaultValueTests))
            message = new DefaultValueTests(message);

        this.sendMessage(message, callback);
    },

    stringArrayTest: function (message, callback) {
        if (!(message instanceof StringArrayTest))
            message = new StringArrayTest(message);

        this.sendMessage(message, callback);
    },

    intArrayTest: function (message, callback) {
        if (!(message instanceof IntArrayTest))
            message = new IntArrayTest(message);

        this.sendMessage(message, callback);
    },

    nestedTypeTest: function (message, callback) {
        if (!(message instanceof NestedTypeTest))
            message = new NestedTypeTest(message);

        this.sendMessage(message, callback);
    },

    nestedTypeArrayTest: function (message, callback) {
        if (!(message instanceof NestedTypeArrayTest))
            message = new NestedTypeArrayTest(message);

        this.sendMessage(message, callback);
    },

    throwingMethod: function (message, callback) {
        if (!(message instanceof ThrowingTest))
            message = new ThrowingTest(message);

        this.sendMessage(message, callback);
    },

    enumTest: function (message, callback) {
        if (!(message instanceof MessageWithEnum))
            message = new MessageWithEnum(message);

        this.sendMessage(message, callback);
    },

    nestedClassTypeTest: function (message, callback) {
        if (!(message instanceof MessageWithNestedTypes))
            message = new MessageWithNestedTypes(message);

        this.sendMessage(message, callback);
    },

    circularReference: function (message, callback) {
        if (!(message instanceof MessageWithCircularReference))
            message = new MessageWithCircularReference(message);

        this.sendMessage(message, callback);
    },

    stringTest: function (message, callback) {
        if (!(message instanceof StringTest))
            message = new StringTest(message);

        this.sendMessage(message, callback);
    }
});

ServiceCallbackChannel = Class.create(ProtoCallbackChannel, {
    initialize: function ($super) {
        $super({
            ping: Ping,
            oneWayPing: OneWayPing
        });
    },

    ping: function (message, expectResponse) {
        throw 'Not implemented';
    },

    oneWayPing: function (message, expectResponse) {
        throw 'Not implemented';
    }
});
