using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using JetBrains.Annotations;

namespace ProtoChannel.CodeGenerator
{
    internal abstract class CodeGenerator : IDisposable
    {
        private readonly int _indentation;
        private StringBuilder _sb;
        private string _fileName;
        private int _indent;
        private bool _disposed;

        protected CodeGenerator(string fileName, int indentation)
        {
            if (fileName == null)
                throw new ArgumentNullException("fileName");

            _fileName = fileName;
            _indentation = indentation;

            _sb = new StringBuilder();

            WriteHeader();
        }

        private void WriteHeader()
        {
            WriteLine("﻿//------------------------------------------------------------------------------");
            WriteLine("// <auto-generated>");
            WriteLine("//     This code was generated by a tool.");
            WriteLine("//");
            WriteLine("//     Changes to this file may cause incorrect behavior and will be lost if");
            WriteLine("//     the code is regenerated.");
            WriteLine("// </auto-generated>");
            WriteLine("//------------------------------------------------------------------------------");
            WriteLine();
        }

        protected void Indent()
        {
            _indent++;
        }

        protected void Unindent()
        {
            _indent--;
        }

        protected void WriteLine()
        {
            _sb.AppendLine();
        }

        protected void WriteLine(string text)
        {
            _sb.AppendLine(new string(' ', _indent * _indentation) + text);
        }

        [StringFormatMethod("format")]
        protected void WriteLine(string format, params object[] args)
        {
            _sb.AppendLine(new string(' ', _indent * _indentation) + String.Format(format, args));
        }

        protected string Modifier
        {
            get { return Program.Arguments.Public ? "public" : "internal"; }
        }

        public abstract void Generate();

        public void Dispose()
        {
            if (!_disposed)
            {
                string content = _sb.ToString();

                // Only write the file when it has changed to not trigger
                // (certain) source control systems etc.

                if (!File.Exists(_fileName) || File.ReadAllText(_fileName) != content)
                    File.WriteAllText(_fileName, content);

                _disposed = true;
            }
        }
    }
}
